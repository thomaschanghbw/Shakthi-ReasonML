// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReactSpring = require("react-spring");

function toJsObj(a, b) {
  return Object.assign(b, a);
}

function constructSpringObj(values, from, config, param) {
  if (config !== undefined) {
    var c = Caml_option.valFromOption(config);
    if (from === undefined) {
      return function (param) {
        return Object.assign({
                    config: c
                  }, Curry._1(values, undefined));
      };
    }
    var f = Caml_option.valFromOption(from);
    return function (param) {
      return Object.assign({
                  from: f,
                  config: c
                }, Curry._1(values, undefined));
    };
  }
  if (from === undefined) {
    return function (param) {
      return Object.assign({}, Curry._1(values, undefined));
    };
  }
  var f$1 = Caml_option.valFromOption(from);
  return function (param) {
    return Object.assign({
                from: f$1
              }, Curry._1(values, undefined));
  };
}

function useSpring(values, from, config, param) {
  return ReactSpring.useSpring(constructSpringObj(values, from, config, undefined));
}

function MakeTransition(Config) {
  return {};
}

function useTrail(number, from, config, values, param) {
  return ReactSpring.useTrail(number, constructSpringObj(values, from, config, undefined));
}

function MakeSpring(Config) {
  var interpolate = function (prim, prim$1) {
    return prim.interpolate(prim$1);
  };
  var use = function (config, from, startValues) {
    var match = ReactSpring.useSpring(constructSpringObj((function (param) {
                return {
                        __values: startValues
                      };
              }), from, config, undefined));
    var set_ = match[1];
    var set = function (config, setValues) {
      var setInput = constructSpringObj((function (param) {
                return {
                        __values: setValues
                      };
              }), from, config, undefined)(undefined);
      return set_(setInput);
    };
    return [
            match[0].__values,
            set
          ];
  };
  return {
          interpolate: interpolate,
          use: use
        };
}

function MakeTrail(Config) {
  var interpolate = function (prim, prim$1) {
    return prim.interpolate(prim$1);
  };
  var use = function (number, config, from, startValues) {
    var match = ReactSpring.useTrail(number, constructSpringObj((function (param) {
                return {
                        __values: Curry._1(startValues, undefined)
                      };
              }), from, config, undefined));
    var set_ = match[1];
    var setFn = function (config, from, setValues) {
      var setInput = constructSpringObj((function (param) {
                return {
                        __values: setValues
                      };
              }), from, config, undefined)(undefined);
      return set_(setInput);
    };
    return [
            $$Array.map((function (t) {
                    return t.__values;
                  }), match[0]),
            setFn
          ];
  };
  return {
          interpolate: interpolate,
          use: use
        };
}

function MakeSprings(Config) {
  var interpolate = function (prim, prim$1) {
    return prim.interpolate(prim$1);
  };
  var use = function (number, config, from, startValues) {
    var match = ReactSpring.useSprings(number, (function (i) {
            return constructSpringObj((function (param) {
                            return Curry._1(startValues, i);
                          }), from, config, undefined)(undefined);
          }));
    var set_ = match[1];
    var setFn = function (config, from, setValues) {
      var setInput = function (i) {
        return constructSpringObj((function (param) {
                        return Curry._1(setValues, i);
                      }), from, config, undefined)(undefined);
      };
      console.log("setInput", setInput, setInput(0));
      return set_(setInput);
    };
    return [
            $$Array.map((function (t) {
                    return t;
                  }), match[0]),
            setFn
          ];
  };
  return {
          interpolate: interpolate,
          use: use
        };
}

function Spring$Div(Props) {
  var className = Props.className;
  var spreadProps = Props.spreadProps;
  var onMouseMove = Props.onMouseMove;
  var onMouseLeave = Props.onMouseLeave;
  var onClick = Props.onClick;
  var onMouseDown = Props.onMouseDown;
  var style = Props.style;
  var childrenOpt = Props.children;
  var children = childrenOpt !== undefined ? Caml_option.valFromOption(childrenOpt) : null;
  var tmp = {
    style: style
  };
  if (className !== undefined) {
    tmp.className = Caml_option.valFromOption(className);
  }
  if (onMouseMove !== undefined) {
    tmp.onMouseMove = Caml_option.valFromOption(onMouseMove);
  }
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  if (onMouseDown !== undefined) {
    tmp.onMouseDown = Caml_option.valFromOption(onMouseDown);
  }
  if (onMouseLeave !== undefined) {
    tmp.onMouseLeave = Caml_option.valFromOption(onMouseLeave);
  }
  var props = Object.assign(spreadProps !== undefined ? Caml_option.valFromOption(spreadProps)() : ({}), tmp);
  return React.createElement(ReactSpring.animated.div, props, children);
}

var Div = {
  make: Spring$Div
};

exports.toJsObj = toJsObj;
exports.constructSpringObj = constructSpringObj;
exports.useSpring = useSpring;
exports.MakeTransition = MakeTransition;
exports.useTrail = useTrail;
exports.MakeSpring = MakeSpring;
exports.MakeTrail = MakeTrail;
exports.MakeSprings = MakeSprings;
exports.Div = Div;
/* react Not a pure module */
